# -*- coding: utf-8 -*-
"""p3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yk2fQ_8d0d-vFKm8WYkktj3q9HowJXe7
"""

def hitung_nilai_huruf(tugas, uts, uas):
    nilai_akhir = (tugas * 0.3) + (uts * 0.3) + (uas * 0.4)

    if nilai_akhir >= 85:
        return 'A', 'Sangat Baik'
    elif nilai_akhir >= 75:
        return 'B', 'Baik'
    elif nilai_akhir >= 65:
        return 'C', 'Cukup'
    elif nilai_akhir >= 50:
        return 'D', 'Kurang'
    else:
        return 'E', 'Sangat Kurang'

# Input nilai dari user
tugas = float(input("Masukkan nilai tugas (0-100): "))
uts = float(input("Masukkan nilai UTS (0-100): "))
uas = float(input("Masukkan nilai UAS (0-100): "))

# Hitung nilai huruf dan keterangan
nilai_huruf, keterangan = hitung_nilai_huruf(tugas, uts, uas)

# Tampilkan hasil
print(f"\nNilai Akhir: {(tugas * 0.3) + (uts * 0.3) + (uas * 0.4):.2f}")
print(f"Nilai Huruf: {nilai_huruf}")
print(f"Keterangan: {keterangan}")

class ATM:
    def __init__(self):
        self.saldo = 1000000  # Saldo awal
        self.pin = "123456"   # PIN default
        self.rekening_tujuan = "987654321"

    def verifikasi_pin(self):
        for i in range(3):
            pin_input = input("Masukkan PIN Anda: ")
            if pin_input == self.pin:
                return True
            print("PIN salah. Silakan coba lagi.")
        print("Anda telah 3x salah memasukkan PIN. Kartu terblokir.")
        return False

    def cek_saldo(self):
        print(f"Saldo Anda: Rp {self.saldo:,}")

    def tarik_tunai(self):
        jumlah = int(input("Masukkan jumlah penarikan: Rp "))
        if jumlah > self.saldo:
            print("Saldo tidak mencukupi.")
        else:
            self.saldo -= jumlah
            print(f"Penarikan berhasil. Saldo tersisa: Rp {self.saldo:,}")

    def setor_tunai(self):
        jumlah = int(input("Masukkan jumlah setoran: Rp "))
        self.saldo += jumlah
        print(f"Setoran berhasil. Saldo sekarang: Rp {self.saldo:,}")

    def transfer(self):
        rek_tujuan = input("Masukkan rekening tujuan: ")
        jumlah = int(input("Masukkan jumlah transfer: Rp "))
        if jumlah > self.saldo:
            print("Saldo tidak mencukupi.")
        else:
            self.saldo -= jumlah
            print(f"Transfer Rp {jumlah:,} ke rekening {rek_tujuan} berhasil.")
            print(f"Saldo tersisa: Rp {self.saldo:,}")

    def ganti_pin(self):
        pin_lama = input("Masukkan PIN lama: ")
        if pin_lama != self.pin:
            print("PIN lama salah.")
            return

        pin_baru = input("Masukkan PIN baru: ")
        konfirmasi = input("Konfirmasi PIN baru: ")

        if pin_baru == konfirmasi:
            self.pin = pin_baru
            print("PIN berhasil diubah.")
        else:
            print("Konfirmasi PIN tidak sesuai.")

    def jalankan(self):
        print("Selamat datang di ATM")
        if not self.verifikasi_pin():
            return

        while True:
            print("\nMenu:")
            print("1. Cek Saldo")
            print("2. Tarik Tunai")
            print("3. Setor Tunai")
            print("4. Transfer")
            print("5. Ganti PIN")
            print("6. Keluar")

            pilihan = input("Pilih menu (1-6): ")

            if pilihan == '1':
                self.cek_saldo()
            elif pilihan == '2':
                self.tarik_tunai()
            elif pilihan == '3':
                self.setor_tunai()
            elif pilihan == '4':
                self.transfer()
            elif pilihan == '5':
                self.ganti_pin()
            elif pilihan == '6':
                print("Terima kasih telah menggunakan layanan kami.")
                break
            else:
                print("Pilihan tidak valid.")

# Jalankan ATM
atm = ATM()
atm.jalankan()

# Metode 1: Menggunakan nested if
def maksimum_nested(a, b, c):
    if a > b:
        if a > c:
            return a
        else:
            return c
    else:
        if b > c:
            return b
        else:
            return c

# Metode 2: Menggunakan operator logika
def maksimum_logika(a, b, c):
    if a > b and a > c:
        return a
    elif b > a and b > c:
        return b
    else:
        return c

# Metode 3: Menggunakan fungsi max()
def maksimum_builtin(a, b, c):
    return max(a, b, c)

# Input dari user
a = float(input("Masukkan bilangan pertama: "))
b = float(input("Masukkan bilangan kedua: "))
c = float(input("Masukkan bilangan ketiga: "))

# Tampilkan hasil dari semua metode
print("\nHasil:")
print(f"Menggunakan nested if: {maksimum_nested(a, b, c)}")
print(f"Menggunakan operator logika: {maksimum_logika(a, b, c)}")
print(f"Menggunakan fungsi max(): {maksimum_builtin(a, b, c)}")
# -*- coding: utf-8 -*-
"""p6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1srkEhtjBNVReXN33xloMCPNeaXcsjdt7
"""

import math
from statistics import median

def tambah(a, b):
    """Mengembalikan hasil penjumlahan a dan b."""
    return a + b

def kurang(a, b):
    """Mengembalikan hasil pengurangan a dan b."""
    return a - b

def kali(a, b):
    """Mengembalikan hasil perkalian a dan b."""
    return a * b

def bagi(a, b):
    """Mengembalikan hasil pembagian a dan b. Jika b adalah 0, mengembalikan 'Tidak bisa dibagi dengan nol'."""
    if b == 0:
        return "Tidak bisa dibagi dengan nol"
    return a / b

def pangkat(a, b):
    """Mengembalikan hasil a pangkat b."""
    return a ** b

def faktorial(n):
    """Mengembalikan faktorial dari n. Jika n negatif, mengembalikan 'Input tidak valid'."""
    if n < 0:
        return "Input tidak valid"
    return math.factorial(n)

def rata_rata(data):
    """Mengembalikan rata-rata dari list data."""
    if len(data) == 0:
        return "Data kosong"
    return sum(data) / len(data)

def median_data(data):
    """Mengembalikan median dari list data."""
    if len(data) == 0:
        return "Data kosong"
    return median(data)

# Contoh penggunaan
if __name__ == "__main__":
    print("Penjumlahan 5 + 3 =", tambah(5, 3))
    print("Pengurangan 5 - 3 =", kurang(5, 3))
    print("Perkalian 5 * 3 =", kali(5, 3))
    print("Pembagian 5 / 0 =", bagi(5, 0))
    print("Pangkat 2^3 =", pangkat(2, 3))
    print("Faktorial 5 =", faktorial(5))
    print("Rata-rata [1, 2, 3, 4, 5] =", rata_rata([1, 2, 3, 4, 5]))
    print("Median [1, 2, 3, 4, 5] =", median_data([1, 2, 3, 4, 5]))

"""
Program Manajemen Data Mahasiswa

Fitur:
- Menambah data mahasiswa (NIM, nama, nilai)
- Mencari mahasiswa berdasarkan NIM atau nama
- Menghitung rata-rata nilai semua mahasiswa
- Menampilkan data mahasiswa berdasarkan peringkat nilai (nilai tertinggi -> terendah)
"""

students = []

def tambah_mahasiswa(nim, nama, nilai):
    """
    Menambah data mahasiswa

    Args:
        nim (str): Nomor Induk Mahasiswa
        nama (str): Nama mahasiswa
        nilai (float): Nilai mahasiswa

    Returns:
        None
    """
    mahasiswa = {
        'nim': nim,
        'nama': nama,
        'nilai': nilai
    }
    students.append(mahasiswa)

def cari_mahasiswa(keyword):
    """
    Mencari mahasiswa berdasarkan NIM atau nama (case insensitive)

    Args:
        keyword (str): NIM atau nama yang dicari

    Returns:
        list: List mahasiswa yang cocok dengan keyword
    """
    keyword_lower = keyword.lower()
    hasil = []
    for mhs in students:
        if keyword_lower == mhs['nim'].lower() or keyword_lower in mhs['nama'].lower():
            hasil.append(mhs)
    return hasil

def hitung_rata_rata():
    """
    Menghitung rata-rata nilai semua mahasiswa

    Returns:
        float: rata-rata nilai, atau None jika data mahasiswa kosong
    """
    if len(students) == 0:
        return None
    total = sum(m['nilai'] for m in students)
    return total / len(students)

def tampilkan_berdasarkan_peringkat():
    """
    Mengembalikan list mahasiswa yang diurutkan berdasarkan nilai dari tertinggi ke terendah

    Returns:
        list: list mahasiswa terurut
    """
    return sorted(students, key=lambda x: x['nilai'], reverse=True)

# Contoh penggunaan
if __name__ == "__main__":
    # Menambah data mahasiswa
    tambah_mahasiswa("001", "reza", 95)
    tambah_mahasiswa("002", "Zaidan", 90)
    tambah_mahasiswa("003", "indra", 78)
    tambah_mahasiswa("004", "dani", 92)

    # Mencari mahasiswa
    print("Cari mahasiswa NIM='002':")
    hasil_cari = cari_mahasiswa("002")
    for m in hasil_cari:
        print(m)

    print("\nCari mahasiswa nama mengandung 'reza':")
    hasil_cari = cari_mahasiswa("reza")
    for m in hasil_cari:
        print(m)

    # Hitung rata-rata nilai
    rata_rata = hitung_rata_rata()
    if rata_rata is not None:
        print(f"\nRata-rata nilai mahasiswa: {rata_rata:.2f}")
    else:
        print("\nData mahasiswa kosong")

    # Tampilkan data mahasiswa berdasarkan peringkat nilai
    print("\nData mahasiswa berdasarkan peringkat nilai:")
    for idx, mhs in enumerate(tampilkan_berdasarkan_peringkat(), start=1):
        print(f"{idx}. NIM: {mhs['nim']}, Nama: {mhs['nama']}, Nilai: {mhs['nilai']}")

import re
from datetime import datetime

# ===== Validasi Input =====
def validasi_email(email: str) -> bool:
    """
    Validasi format email menggunakan regex sederhana.

    Args:
        email (str): Email yang akan divalidasi.

    Returns:
        bool: True jika email valid, False jika tidak.
    """
    pola = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return bool(re.fullmatch(pola, email))

def validasi_nomor_telepon(phone: str) -> bool:
    """
    Validasi format nomor telepon sederhana.
    Format diterima: angka, bisa diawali dengan +, spasi, dan tanda -.

    Args:
        phone (str): Nomor telepon yang akan divalidasi.

    Returns:
        bool: True jika format valid, False jika tidak.
    """
    pola = r'^\+?[\d\s-]+$'
    return bool(re.fullmatch(pola, phone))

def validasi_tanggal(date_str: str, format: str = '%Y-%m-%d') -> bool:
    """
    Validasi apakah string sesuai dengan format tanggal tertentu.

    Args:
        date_str (str): String tanggal.
        format (str): Format tanggal, default '%Y-%m-%d'.

    Returns:
        bool: True jika tanggal valid, False jika tidak.
    """
    try:
        datetime.strptime(date_str, format)
        return True
    except ValueError:
        return False

# ===== Manipulasi String =====
def hitung_kata(text: str) -> int:
    """
    Menghitung jumlah kata dalam teks.

    Args:
        text (str): Teks input.

    Returns:
        int: Jumlah kata.
    """
    kata = re.findall(r'\b\w+\b', text)
    return len(kata)

def ke_huruf_besar(text: str) -> str:
    """
    Mengubah seluruh teks menjadi huruf besar.

    Args:
        text (str): Teks input.

    Returns:
        str: Teks huruf besar.
    """
    return text.upper()

def ke_huruf_kecil(text: str) -> str:
    """
    Mengubah seluruh teks menjadi huruf kecil.

    Args:
        text (str): Teks input.

    Returns:
        str: Teks huruf kecil.
    """
    return text.lower()

def kapitalisasi_kata(text: str) -> str:
    """
    Mengubah teks sehingga setiap kata diawali huruf kapital.

    Args:
        text (str): Teks input.

    Returns:
        str: Teks dengan kapitalisasi tiap kata.
    """
    return text.title()

# ===== Operasi File =====
def baca_file(nama_file: str) -> list:
    """
    Membaca isi file dan mengembalikan list baris tanpa newline.

    Args:
        nama_file (str): Nama file.

    Returns:
        list: List baris isi file.
    """
    try:
        with open(nama_file, 'r', encoding='utf-8') as f:
            return [baris.rstrip('\n') for baris in f]
    except FileNotFoundError:
        print(f"File '{nama_file}' tidak ditemukan.")
        return []

def tulis_file(nama_file: str, isi, mode: str = 'w') -> None:
    """
    Menulis isi ke file. Bisa tulisan string atau list baris.

    Args:
        nama_file (str): Nama file.
        isi (str/list): Isi yang akan ditulis.
        mode (str): Mode penulisan ('w', 'a'), default 'w'.

    Returns:
        None
    """
    try:
        with open(nama_file, mode, encoding='utf-8') as f:
            if isinstance(isi, list):
                for baris in isi:
                    f.write(str(baris) + '\n')
            else:
                f.write(str(isi))
    except Exception as e:
        print(f"Error menulis file '{nama_file}': {e}")

def proses_file(nama_file: str) -> list:
    """
    Membaca file dan memproses data: menghapus baris kosong dan merapikan spasi.

    Args:
        nama_file (str): Nama file.

    Returns:
        list: List baris yang telah diproses.
    """
    baris = baca_file(nama_file)
    return [b.strip() for b in baris if b.strip()]

# Contoh penggunaan modul
if __name__ == "__main__":
    print("=== Contoh Validasi ===")
    print("Email 'rezaekaputra@gmail.com' valid:", validasi_email("zaidan@gmail.com"))
    print("Nomor telepon '+628123456789' valid:", validasi_nomor_telepon("+628123456789"))
    print("Tanggal '2024-06-10' valid:", validasi_tanggal("2024-06-10"))
    print("Tanggal '10/06/2024' dengan format '%d/%m/%Y' valid:", validasi_tanggal("10/06/2024", "%d/%m/%Y"))

    print("\n=== Contoh Manipulasi String ===")
    teks = "Hai Untara! selamat datang."
    print("Jumlah kata:", hitung_kata(teks))
    print("Huruf besar:", ke_huruf_besar(teks))
    print("Huruf kecil:", ke_huruf_kecil(teks))
    print("Kapitalisasi kata:", kapitalisasi_kata(teks))

    print("\n=== Contoh Operasi File ===")
    file_contoh = "selamat datang"
    tulis_file(file_contoh, ["Baris 1", "Baris 2", "", "Baris 4"])
    isi_file = baca_file(file_contoh)
    print("Isi file:", isi_file)
    proses = proses_file(file_contoh)
    print("Isi file setelah proses:", proses)

"""
Program implementasi factorial dan fibonacci dengan tiga metode:
1. Rekursi dasar
2. Rekursi dengan memoization
3. Iterasi

Kemudian dibandingkan kinerjanya pada beberapa nilai input berbeda.
"""

import time
import sys
sys.setrecursionlimit(10000)  # untuk menghindari limit rekursi bila input besar

# ======== Faktorial =========
# Rekursi dasar factorial
def factorial_recursive(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    if n == 0 or n == 1:
        return 1
    return n * factorial_recursive(n-1)

# Rekursi factorial dengan memoization
factorial_memo = {}
def factorial_memoization(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    if n in factorial_memo:
        return factorial_memo[n]
    if n == 0 or n == 1:
        factorial_memo[n] = 1
    else:
        factorial_memo[n] = n * factorial_memoization(n-1)
    return factorial_memo[n]

# Iterasi factorial
def factorial_iterative(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    result = 1
    for i in range(2, n+1):
        result *= i
    return result


# ======== Fibonacci =========
# Rekursi dasar fibonacci
def fibonacci_recursive(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

# Rekursi fibonacci dengan memoization
fib_memo = {}
def fibonacci_memoization(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    if n in fib_memo:
        return fib_memo[n]
    if n == 0:
        fib_memo[n] = 0
    elif n == 1:
        fib_memo[n] = 1
    else:
        fib_memo[n] = fibonacci_memoization(n-1) + fibonacci_memoization(n-2)
    return fib_memo[n]

# Iterasi fibonacci
def fibonacci_iterative(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    a, b = 0, 1
    if n == 0:
        return 0
    for _ in range(2, n+1):
        a, b = b, a + b
    return b


# ======= Fungsi pengukur waktu eksekusi =======
def measure_time(func, arg):
    start = time.time()
    try:
        result = func(arg)
        end = time.time()
        return end - start, result
    except Exception as e:
        return None, str(e)


# ======= Fungsi uji untuk factorial ===========
def test_factorial():
    test_values = [5, 10, 15, 20, 25]  # input untuk factorial

    print("Pengujian Faktorial (input dan waktu eksekusi dalam detik):")
    for n in test_values:
        print(f"\nInput = {n}")

        t, r = measure_time(factorial_recursive, n)
        print(f"Faktorial Rekursi Dasar  : {t:.6f} detik, hasil: {r}")

        # reset memo dictionary setiap kali uji ulang agar adil
        global factorial_memo
        factorial_memo = {}
        t, r = measure_time(factorial_memoization, n)
        print(f"Faktorial Memoization    : {t:.6f} detik, hasil: {r}")

        t, r = measure_time(factorial_iterative, n)
        print(f"Faktorial Iteratif       : {t:.6f} detik, hasil: {r}")

# ======= Fungsi uji untuk fibonacci ===========
def test_fibonacci():
    test_values = [10, 20, 30, 35]  # input untuk fibonacci - angka besar bisa lama untuk rekursi dasar

    print("\nPengujian Fibonacci (input dan waktu eksekusi dalam detik):")
    for n in test_values:
        print(f"\nInput = {n}")

        t, r = measure_time(fibonacci_recursive, n)
        if t is None:
            print(f"Fibonacci Rekursi Dasar  : Gagal - {r}")
        else:
            print(f"Fibonacci Rekursi Dasar  : {t:.6f} detik, hasil: {r}")

        global fib_memo
        fib_memo = {}
        t, r = measure_time(fibonacci_memoization, n)
        print(f"Fibonacci Memoization    : {t:.6f} detik, hasil: {r}")

        t, r = measure_time(fibonacci_iterative, n)
        print(f"Fibonacci Iteratif       : {t:.6f} detik, hasil: {r}")

# ======= Main program =======
if __name__ == "__main__":
    print("==== Perbandingan Kinerja Faktorial dan Fibonacci ====\n")

    test_factorial()
"""
Program implementasi factorial dan fibonacci dengan tiga metode:
1. Rekursi dasar
2. Rekursi dengan memoization
3. Iterasi

Kemudian dibandingkan kinerjanya pada beberapa nilai input berbeda.
"""

import time
import sys
sys.setrecursionlimit(10000)  # untuk menghindari limit rekursi bila input besar

# ======== Faktorial =========
# Rekursi dasar factorial
def factorial_recursive(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    if n == 0 or n == 1:
        return 1
    return n * factorial_recursive(n-1)

# Rekursi factorial dengan memoization
factorial_memo = {}
def factorial_memoization(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    if n in factorial_memo:
        return factorial_memo[n]
    if n == 0 or n == 1:
        factorial_memo[n] = 1
    else:
        factorial_memo[n] = n * factorial_memoization(n-1)
    return factorial_memo[n]

# Iterasi factorial
def factorial_iterative(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    result = 1
    for i in range(2, n+1):
        result *= i
    return result


# ======== Fibonacci =========
# Rekursi dasar fibonacci
def fibonacci_recursive(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

# Rekursi fibonacci dengan memoization
fib_memo = {}
def fibonacci_memoization(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    if n in fib_memo:
        return fib_memo[n]
    if n == 0:
        fib_memo[n] = 0
    elif n == 1:
        fib_memo[n] = 1
    else:
        fib_memo[n] = fibonacci_memoization(n-1) + fibonacci_memoization(n-2)
    return fib_memo[n]

# Iterasi fibonacci
def fibonacci_iterative(n):
    if n < 0:
        raise ValueError("Input harus >= 0")
    a, b = 0, 1
    if n == 0:
        return 0
    for _ in range(2, n+1):
        a, b = b, a + b
    return b


# ======= Fungsi pengukur waktu eksekusi =======
def measure_time(func, arg):
    start = time.time()
    try:
        result = func(arg)
        end = time.time()
        return end - start, result
    except Exception as e:
        return None, str(e)


# ======= Fungsi uji untuk factorial ===========
def test_factorial():
    test_values = [5, 10, 15, 20, 25]  # input untuk factorial

    print("Pengujian Faktorial (input dan waktu eksekusi dalam detik):")
    for n in test_values:
        print(f"\nInput = {n}")

        t, r = measure_time(factorial_recursive, n)
        print(f"Faktorial Rekursi Dasar  : {t:.6f} detik, hasil: {r}")

        # reset memo dictionary setiap kali uji ulang agar adil
        global factorial_memo
        factorial_memo = {}
        t, r = measure_time(factorial_memoization, n)
        print(f"Faktorial Memoization    : {t:.6f} detik, hasil: {r}")

        t, r = measure_time(factorial_iterative, n)
        print(f"Faktorial Iteratif       : {t:.6f} detik, hasil: {r}")

# ======= Fungsi uji untuk fibonacci ===========
def test_fibonacci():
    test_values = [10, 20, 30, 35]  # input untuk fibonacci - angka besar bisa lama untuk rekursi dasar

    print("\nPengujian Fibonacci (input dan waktu eksekusi dalam detik):")
    for n in test_values:
        print(f"\nInput = {n}")

        t, r = measure_time(fibonacci_recursive, n)
        if t is None:
            print(f"Fibonacci Rekursi Dasar  : Gagal - {r}")
        else:
            print(f"Fibonacci Rekursi Dasar  : {t:.6f} detik, hasil: {r}")

        global fib_memo
        fib_memo = {}
        t, r = measure_time(fibonacci_memoization, n)
        print(f"Fibonacci Memoization    : {t:.6f} detik, hasil: {r}")

        t, r = measure_time(fibonacci_iterative, n)
        print(f"Fibonacci Iteratif       : {t:.6f} detik, hasil: {r}")

# ======= Main program =======
if __name__ == "__main__":
    print("==== Perbandingan Kinerja Faktorial dan Fibonacci ====\n")

    test_factorial()
    test_fibonacci()

    print("""
""")

import random

def generate_sorted_array(size, min_val, max_val):
    """
    Membuat array terurut dengan elemen acak.
    """
    arr = [random.randint(min_val, max_val) for _ in range(size)]
    arr.sort()
    return arr

def binary_search_recursive(arr, target, left, right, counter):
    """
    Pencarian biner secara rekursif dengan penghitung perbandingan.

    Args:
        arr (list): array terurut.
        target (int): elemen yang dicari.
        left (int): batas kiri pencarian.
        right (int): batas kanan pencarian.
        counter (list): list dengan satu elemen int untuk menyimpan hitung perbandingan.

    Returns:
        indeks (int) dari target jika ditemukan, -1 jika tidak, dan counter bertambah setiap perbandingan.
    """
    if left > right:
        return -1

    counter[0] += 1  # Hitung satu kali perbandingan

    mid = (left + right) // 2

    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search_recursive(arr, target, mid + 1, right, counter)
    else:
        return binary_search_recursive(arr, target, left, mid - 1, counter)

def test_search():
    size = 20
    min_val = 1
    max_val = 100
    arr = generate_sorted_array(size, min_val, max_val)
    print("Array terurut:", arr)

    # Mencari elemen yang ada di array (nilai tengah)
    target_exist = arr[size // 2]
    counter_exist = [0]
    index_found = binary_search_recursive(arr, target_exist, 0, size - 1, counter_exist)
    print(f"\nMencari elemen yang ada: {target_exist}")
    if index_found != -1:
        print(f"Elemen ditemukan pada indeks {index_found}")
    else:
        print("Elemen tidak ditemukan")
    print(f"Jumlah perbandingan: {counter_exist[0]}")

    # Mencari elemen yang tidak ada di array (nilai di luar range)
    target_not_exist = max_val + 10
    counter_not_exist = [0]
    index_not_found = binary_search_recursive(arr, target_not_exist, 0, size - 1, counter_not_exist)
    print(f"\nMencari elemen yang tidak ada: {target_not_exist}")
    if index_not_found != -1:
        print(f"Elemen ditemukan pada indeks {index_not_found}")
    else:
        print("Elemen tidak ditemukan")
    print(f"Jumlah perbandingan: {counter_not_exist[0]}")

if __name__ == "__main__":
    test_search()